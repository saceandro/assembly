	.align 2
	.globl fact
fact:
	mflr 0			# リンクレジスタ(LR)の内容を、r0に格納する。
	std 0, 16(1)		# r0(LRの内容になっている)を、スタックポインタ(SP)+16のメモリに退避する。
	std 14, -16(1)		# SP-16のメモリは、後にスタックの不揮発性レジスタ保存領域となるので、不揮発性レジスタr14の値を、その場所に退避しておく。
	stdu 1, -128(1)		# SPの内容を、SP-128のメモリに格納し、更にSPの値を、SP-128で置き換える。これにより、48+64+8(r14保存用)+8(アライメントのためのパディング) = 128byteのスタックが確保される。
	mr. 14, 3		# 引数が入ったr3は揮発性レジスタなので、呼び出し先で変えられてもよいように、不揮発性レジスタr14に保存する。更に、r3の比較結果のフラグをcr0に書く。
	li 3, 1			# 引数が0であった場合に1を戻り値とするため、r3に1を格納する。
	beq 0, .fin		# 引数が0であれば、.finへ分岐
	subi 3, 14, 1		# 引数-1を、関数factに渡す。(再帰)
	bl fact			# r3にfact(引数-1)が入った状態で戻ってくる。
	nop
	mulld 3, 14, 3		# 引数 * fact(引数-1)を、返り値にする。
.fin:				# 復帰処理
	addi 1, 1, 128		# SPの値を、128だけ増やす(元のアドレスに戻す)。
	ld 0, 16(1)		# SP+16のアドレスにあるメモリの内容(64bit)を、r0にロードする。そこには、関数先頭で退避しておいたLRの値が入っている。
	mtlr 0			# LRを、r0で置き換える。つまり、LRを元の内容に復帰する。ここでLRを復帰しておかないと、呼びだし元に戻れない。
	ld 14, -16(1)		# SP-16(関数の初めの方で、r14を退避しておいた場所)のメモリの内容を、r14に格納する。つまり、不揮発性レジスタの復帰処理。
	blr			# 呼び出し元に分岐
